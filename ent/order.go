// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/notmyalias/ogent-custom-ent-enum-issue/ent/order"
	"github.com/notmyalias/ogent-custom-ent-enum-issue/ent/schema"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ItemTypeExample1 holds the value of the "item_type_example_1" field.
	ItemTypeExample1 schema.ItemType `json:"item_type_example_1,omitempty"`
	// ItemTypeExample2 holds the value of the "item_type_example_2" field.
	ItemTypeExample2 schema.ItemType `json:"item_type_example_2,omitempty"`
	// ItemTypeExample3 holds the value of the "item_type_example_3" field.
	ItemTypeExample3 schema.StructItemType `json:"item_type_example_3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldItemTypeExample1, order.FieldItemTypeExample2:
			values[i] = new(schema.ItemType)
		case order.FieldItemTypeExample3:
			values[i] = new(schema.StructItemType)
		case order.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case order.FieldItemTypeExample1:
			if value, ok := values[i].(*schema.ItemType); !ok {
				return fmt.Errorf("unexpected type %T for field item_type_example_1", values[i])
			} else if value != nil {
				o.ItemTypeExample1 = *value
			}
		case order.FieldItemTypeExample2:
			if value, ok := values[i].(*schema.ItemType); !ok {
				return fmt.Errorf("unexpected type %T for field item_type_example_2", values[i])
			} else if value != nil {
				o.ItemTypeExample2 = *value
			}
		case order.FieldItemTypeExample3:
			if value, ok := values[i].(*schema.StructItemType); !ok {
				return fmt.Errorf("unexpected type %T for field item_type_example_3", values[i])
			} else if value != nil {
				o.ItemTypeExample3 = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("item_type_example_1=")
	builder.WriteString(fmt.Sprintf("%v", o.ItemTypeExample1))
	builder.WriteString(", ")
	builder.WriteString("item_type_example_2=")
	builder.WriteString(fmt.Sprintf("%v", o.ItemTypeExample2))
	builder.WriteString(", ")
	builder.WriteString("item_type_example_3=")
	builder.WriteString(fmt.Sprintf("%v", o.ItemTypeExample3))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
