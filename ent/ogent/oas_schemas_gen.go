// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type CreateOrderReq struct {
	ItemTypeExample1 CreateOrderReqItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 int                            `json:"item_type_example_2"`
	ItemTypeExample3 CreateOrderReqItemTypeExample3 `json:"item_type_example_3"`
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *CreateOrderReq) GetItemTypeExample1() CreateOrderReqItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *CreateOrderReq) GetItemTypeExample2() int {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *CreateOrderReq) GetItemTypeExample3() CreateOrderReqItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *CreateOrderReq) SetItemTypeExample1(val CreateOrderReqItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *CreateOrderReq) SetItemTypeExample2(val int) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *CreateOrderReq) SetItemTypeExample3(val CreateOrderReqItemTypeExample3) {
	s.ItemTypeExample3 = val
}

type CreateOrderReqItemTypeExample1 string

const (
	CreateOrderReqItemTypeExample1PHYSICAL CreateOrderReqItemTypeExample1 = "PHYSICAL"
	CreateOrderReqItemTypeExample1DIGITAL  CreateOrderReqItemTypeExample1 = "DIGITAL"
	CreateOrderReqItemTypeExample1SERVICE  CreateOrderReqItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderReqItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderReqItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case CreateOrderReqItemTypeExample1DIGITAL:
		return []byte(s), nil
	case CreateOrderReqItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderReqItemTypeExample1) UnmarshalText(data []byte) error {
	switch CreateOrderReqItemTypeExample1(data) {
	case CreateOrderReqItemTypeExample1PHYSICAL:
		*s = CreateOrderReqItemTypeExample1PHYSICAL
		return nil
	case CreateOrderReqItemTypeExample1DIGITAL:
		*s = CreateOrderReqItemTypeExample1DIGITAL
		return nil
	case CreateOrderReqItemTypeExample1SERVICE:
		*s = CreateOrderReqItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateOrderReqItemTypeExample3 string

const (
	CreateOrderReqItemTypeExample3PHYSICAL CreateOrderReqItemTypeExample3 = "PHYSICAL"
	CreateOrderReqItemTypeExample3DIGITAL  CreateOrderReqItemTypeExample3 = "DIGITAL"
	CreateOrderReqItemTypeExample3SERVICE  CreateOrderReqItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderReqItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderReqItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case CreateOrderReqItemTypeExample3DIGITAL:
		return []byte(s), nil
	case CreateOrderReqItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderReqItemTypeExample3) UnmarshalText(data []byte) error {
	switch CreateOrderReqItemTypeExample3(data) {
	case CreateOrderReqItemTypeExample3PHYSICAL:
		*s = CreateOrderReqItemTypeExample3PHYSICAL
		return nil
	case CreateOrderReqItemTypeExample3DIGITAL:
		*s = CreateOrderReqItemTypeExample3DIGITAL
		return nil
	case CreateOrderReqItemTypeExample3SERVICE:
		*s = CreateOrderReqItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteOrderNoContent is response for DeleteOrder operation.
type DeleteOrderNoContent struct{}

func (*DeleteOrderNoContent) deleteOrderRes() {}

type ListOrderOKApplicationJSON []OrderList

func (ListOrderOKApplicationJSON) listOrderRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrderReqItemTypeExample1 returns new OptUpdateOrderReqItemTypeExample1 with value set to v.
func NewOptUpdateOrderReqItemTypeExample1(v UpdateOrderReqItemTypeExample1) OptUpdateOrderReqItemTypeExample1 {
	return OptUpdateOrderReqItemTypeExample1{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrderReqItemTypeExample1 is optional UpdateOrderReqItemTypeExample1.
type OptUpdateOrderReqItemTypeExample1 struct {
	Value UpdateOrderReqItemTypeExample1
	Set   bool
}

// IsSet returns true if OptUpdateOrderReqItemTypeExample1 was set.
func (o OptUpdateOrderReqItemTypeExample1) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrderReqItemTypeExample1) Reset() {
	var v UpdateOrderReqItemTypeExample1
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrderReqItemTypeExample1) SetTo(v UpdateOrderReqItemTypeExample1) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrderReqItemTypeExample1) Get() (v UpdateOrderReqItemTypeExample1, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrderReqItemTypeExample1) Or(d UpdateOrderReqItemTypeExample1) UpdateOrderReqItemTypeExample1 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrderReqItemTypeExample3 returns new OptUpdateOrderReqItemTypeExample3 with value set to v.
func NewOptUpdateOrderReqItemTypeExample3(v UpdateOrderReqItemTypeExample3) OptUpdateOrderReqItemTypeExample3 {
	return OptUpdateOrderReqItemTypeExample3{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrderReqItemTypeExample3 is optional UpdateOrderReqItemTypeExample3.
type OptUpdateOrderReqItemTypeExample3 struct {
	Value UpdateOrderReqItemTypeExample3
	Set   bool
}

// IsSet returns true if OptUpdateOrderReqItemTypeExample3 was set.
func (o OptUpdateOrderReqItemTypeExample3) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrderReqItemTypeExample3) Reset() {
	var v UpdateOrderReqItemTypeExample3
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrderReqItemTypeExample3) SetTo(v UpdateOrderReqItemTypeExample3) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrderReqItemTypeExample3) Get() (v UpdateOrderReqItemTypeExample3, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrderReqItemTypeExample3) Or(d UpdateOrderReqItemTypeExample3) UpdateOrderReqItemTypeExample3 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrderCreate
type OrderCreate struct {
	ID               uuid.UUID                   `json:"id"`
	ItemTypeExample1 OrderCreateItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 int                         `json:"item_type_example_2"`
	ItemTypeExample3 OrderCreateItemTypeExample3 `json:"item_type_example_3"`
}

// GetID returns the value of ID.
func (s *OrderCreate) GetID() uuid.UUID {
	return s.ID
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *OrderCreate) GetItemTypeExample1() OrderCreateItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *OrderCreate) GetItemTypeExample2() int {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *OrderCreate) GetItemTypeExample3() OrderCreateItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetID sets the value of ID.
func (s *OrderCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *OrderCreate) SetItemTypeExample1(val OrderCreateItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *OrderCreate) SetItemTypeExample2(val int) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *OrderCreate) SetItemTypeExample3(val OrderCreateItemTypeExample3) {
	s.ItemTypeExample3 = val
}

func (*OrderCreate) createOrderRes() {}

type OrderCreateItemTypeExample1 string

const (
	OrderCreateItemTypeExample1PHYSICAL OrderCreateItemTypeExample1 = "PHYSICAL"
	OrderCreateItemTypeExample1DIGITAL  OrderCreateItemTypeExample1 = "DIGITAL"
	OrderCreateItemTypeExample1SERVICE  OrderCreateItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderCreateItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case OrderCreateItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case OrderCreateItemTypeExample1DIGITAL:
		return []byte(s), nil
	case OrderCreateItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderCreateItemTypeExample1) UnmarshalText(data []byte) error {
	switch OrderCreateItemTypeExample1(data) {
	case OrderCreateItemTypeExample1PHYSICAL:
		*s = OrderCreateItemTypeExample1PHYSICAL
		return nil
	case OrderCreateItemTypeExample1DIGITAL:
		*s = OrderCreateItemTypeExample1DIGITAL
		return nil
	case OrderCreateItemTypeExample1SERVICE:
		*s = OrderCreateItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrderCreateItemTypeExample3 string

const (
	OrderCreateItemTypeExample3PHYSICAL OrderCreateItemTypeExample3 = "PHYSICAL"
	OrderCreateItemTypeExample3DIGITAL  OrderCreateItemTypeExample3 = "DIGITAL"
	OrderCreateItemTypeExample3SERVICE  OrderCreateItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderCreateItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case OrderCreateItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case OrderCreateItemTypeExample3DIGITAL:
		return []byte(s), nil
	case OrderCreateItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderCreateItemTypeExample3) UnmarshalText(data []byte) error {
	switch OrderCreateItemTypeExample3(data) {
	case OrderCreateItemTypeExample3PHYSICAL:
		*s = OrderCreateItemTypeExample3PHYSICAL
		return nil
	case OrderCreateItemTypeExample3DIGITAL:
		*s = OrderCreateItemTypeExample3DIGITAL
		return nil
	case OrderCreateItemTypeExample3SERVICE:
		*s = OrderCreateItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OrderList
type OrderList struct {
	ID               uuid.UUID                 `json:"id"`
	ItemTypeExample1 OrderListItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 int                       `json:"item_type_example_2"`
	ItemTypeExample3 OrderListItemTypeExample3 `json:"item_type_example_3"`
}

// GetID returns the value of ID.
func (s *OrderList) GetID() uuid.UUID {
	return s.ID
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *OrderList) GetItemTypeExample1() OrderListItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *OrderList) GetItemTypeExample2() int {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *OrderList) GetItemTypeExample3() OrderListItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetID sets the value of ID.
func (s *OrderList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *OrderList) SetItemTypeExample1(val OrderListItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *OrderList) SetItemTypeExample2(val int) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *OrderList) SetItemTypeExample3(val OrderListItemTypeExample3) {
	s.ItemTypeExample3 = val
}

type OrderListItemTypeExample1 string

const (
	OrderListItemTypeExample1PHYSICAL OrderListItemTypeExample1 = "PHYSICAL"
	OrderListItemTypeExample1DIGITAL  OrderListItemTypeExample1 = "DIGITAL"
	OrderListItemTypeExample1SERVICE  OrderListItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderListItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case OrderListItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case OrderListItemTypeExample1DIGITAL:
		return []byte(s), nil
	case OrderListItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderListItemTypeExample1) UnmarshalText(data []byte) error {
	switch OrderListItemTypeExample1(data) {
	case OrderListItemTypeExample1PHYSICAL:
		*s = OrderListItemTypeExample1PHYSICAL
		return nil
	case OrderListItemTypeExample1DIGITAL:
		*s = OrderListItemTypeExample1DIGITAL
		return nil
	case OrderListItemTypeExample1SERVICE:
		*s = OrderListItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrderListItemTypeExample3 string

const (
	OrderListItemTypeExample3PHYSICAL OrderListItemTypeExample3 = "PHYSICAL"
	OrderListItemTypeExample3DIGITAL  OrderListItemTypeExample3 = "DIGITAL"
	OrderListItemTypeExample3SERVICE  OrderListItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderListItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case OrderListItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case OrderListItemTypeExample3DIGITAL:
		return []byte(s), nil
	case OrderListItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderListItemTypeExample3) UnmarshalText(data []byte) error {
	switch OrderListItemTypeExample3(data) {
	case OrderListItemTypeExample3PHYSICAL:
		*s = OrderListItemTypeExample3PHYSICAL
		return nil
	case OrderListItemTypeExample3DIGITAL:
		*s = OrderListItemTypeExample3DIGITAL
		return nil
	case OrderListItemTypeExample3SERVICE:
		*s = OrderListItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OrderRead
type OrderRead struct {
	ID               uuid.UUID                 `json:"id"`
	ItemTypeExample1 OrderReadItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 int                       `json:"item_type_example_2"`
	ItemTypeExample3 OrderReadItemTypeExample3 `json:"item_type_example_3"`
}

// GetID returns the value of ID.
func (s *OrderRead) GetID() uuid.UUID {
	return s.ID
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *OrderRead) GetItemTypeExample1() OrderReadItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *OrderRead) GetItemTypeExample2() int {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *OrderRead) GetItemTypeExample3() OrderReadItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetID sets the value of ID.
func (s *OrderRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *OrderRead) SetItemTypeExample1(val OrderReadItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *OrderRead) SetItemTypeExample2(val int) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *OrderRead) SetItemTypeExample3(val OrderReadItemTypeExample3) {
	s.ItemTypeExample3 = val
}

func (*OrderRead) readOrderRes() {}

type OrderReadItemTypeExample1 string

const (
	OrderReadItemTypeExample1PHYSICAL OrderReadItemTypeExample1 = "PHYSICAL"
	OrderReadItemTypeExample1DIGITAL  OrderReadItemTypeExample1 = "DIGITAL"
	OrderReadItemTypeExample1SERVICE  OrderReadItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderReadItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case OrderReadItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case OrderReadItemTypeExample1DIGITAL:
		return []byte(s), nil
	case OrderReadItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderReadItemTypeExample1) UnmarshalText(data []byte) error {
	switch OrderReadItemTypeExample1(data) {
	case OrderReadItemTypeExample1PHYSICAL:
		*s = OrderReadItemTypeExample1PHYSICAL
		return nil
	case OrderReadItemTypeExample1DIGITAL:
		*s = OrderReadItemTypeExample1DIGITAL
		return nil
	case OrderReadItemTypeExample1SERVICE:
		*s = OrderReadItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrderReadItemTypeExample3 string

const (
	OrderReadItemTypeExample3PHYSICAL OrderReadItemTypeExample3 = "PHYSICAL"
	OrderReadItemTypeExample3DIGITAL  OrderReadItemTypeExample3 = "DIGITAL"
	OrderReadItemTypeExample3SERVICE  OrderReadItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderReadItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case OrderReadItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case OrderReadItemTypeExample3DIGITAL:
		return []byte(s), nil
	case OrderReadItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderReadItemTypeExample3) UnmarshalText(data []byte) error {
	switch OrderReadItemTypeExample3(data) {
	case OrderReadItemTypeExample3PHYSICAL:
		*s = OrderReadItemTypeExample3PHYSICAL
		return nil
	case OrderReadItemTypeExample3DIGITAL:
		*s = OrderReadItemTypeExample3DIGITAL
		return nil
	case OrderReadItemTypeExample3SERVICE:
		*s = OrderReadItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OrderUpdate
type OrderUpdate struct {
	ID               uuid.UUID                   `json:"id"`
	ItemTypeExample1 OrderUpdateItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 int                         `json:"item_type_example_2"`
	ItemTypeExample3 OrderUpdateItemTypeExample3 `json:"item_type_example_3"`
}

// GetID returns the value of ID.
func (s *OrderUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *OrderUpdate) GetItemTypeExample1() OrderUpdateItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *OrderUpdate) GetItemTypeExample2() int {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *OrderUpdate) GetItemTypeExample3() OrderUpdateItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetID sets the value of ID.
func (s *OrderUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *OrderUpdate) SetItemTypeExample1(val OrderUpdateItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *OrderUpdate) SetItemTypeExample2(val int) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *OrderUpdate) SetItemTypeExample3(val OrderUpdateItemTypeExample3) {
	s.ItemTypeExample3 = val
}

func (*OrderUpdate) updateOrderRes() {}

type OrderUpdateItemTypeExample1 string

const (
	OrderUpdateItemTypeExample1PHYSICAL OrderUpdateItemTypeExample1 = "PHYSICAL"
	OrderUpdateItemTypeExample1DIGITAL  OrderUpdateItemTypeExample1 = "DIGITAL"
	OrderUpdateItemTypeExample1SERVICE  OrderUpdateItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderUpdateItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case OrderUpdateItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case OrderUpdateItemTypeExample1DIGITAL:
		return []byte(s), nil
	case OrderUpdateItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderUpdateItemTypeExample1) UnmarshalText(data []byte) error {
	switch OrderUpdateItemTypeExample1(data) {
	case OrderUpdateItemTypeExample1PHYSICAL:
		*s = OrderUpdateItemTypeExample1PHYSICAL
		return nil
	case OrderUpdateItemTypeExample1DIGITAL:
		*s = OrderUpdateItemTypeExample1DIGITAL
		return nil
	case OrderUpdateItemTypeExample1SERVICE:
		*s = OrderUpdateItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrderUpdateItemTypeExample3 string

const (
	OrderUpdateItemTypeExample3PHYSICAL OrderUpdateItemTypeExample3 = "PHYSICAL"
	OrderUpdateItemTypeExample3DIGITAL  OrderUpdateItemTypeExample3 = "DIGITAL"
	OrderUpdateItemTypeExample3SERVICE  OrderUpdateItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderUpdateItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case OrderUpdateItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case OrderUpdateItemTypeExample3DIGITAL:
		return []byte(s), nil
	case OrderUpdateItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderUpdateItemTypeExample3) UnmarshalText(data []byte) error {
	switch OrderUpdateItemTypeExample3(data) {
	case OrderUpdateItemTypeExample3PHYSICAL:
		*s = OrderUpdateItemTypeExample3PHYSICAL
		return nil
	case OrderUpdateItemTypeExample3DIGITAL:
		*s = OrderUpdateItemTypeExample3DIGITAL
		return nil
	case OrderUpdateItemTypeExample3SERVICE:
		*s = OrderUpdateItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createOrderRes() {}
func (*R400) deleteOrderRes() {}
func (*R400) listOrderRes()   {}
func (*R400) readOrderRes()   {}
func (*R400) updateOrderRes() {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteOrderRes() {}
func (*R404) listOrderRes()   {}
func (*R404) readOrderRes()   {}
func (*R404) updateOrderRes() {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createOrderRes() {}
func (*R409) deleteOrderRes() {}
func (*R409) listOrderRes()   {}
func (*R409) readOrderRes()   {}
func (*R409) updateOrderRes() {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createOrderRes() {}
func (*R500) deleteOrderRes() {}
func (*R500) listOrderRes()   {}
func (*R500) readOrderRes()   {}
func (*R500) updateOrderRes() {}

type UpdateOrderReq struct {
	ItemTypeExample1 OptUpdateOrderReqItemTypeExample1 `json:"item_type_example_1"`
	ItemTypeExample2 OptInt                            `json:"item_type_example_2"`
	ItemTypeExample3 OptUpdateOrderReqItemTypeExample3 `json:"item_type_example_3"`
}

// GetItemTypeExample1 returns the value of ItemTypeExample1.
func (s *UpdateOrderReq) GetItemTypeExample1() OptUpdateOrderReqItemTypeExample1 {
	return s.ItemTypeExample1
}

// GetItemTypeExample2 returns the value of ItemTypeExample2.
func (s *UpdateOrderReq) GetItemTypeExample2() OptInt {
	return s.ItemTypeExample2
}

// GetItemTypeExample3 returns the value of ItemTypeExample3.
func (s *UpdateOrderReq) GetItemTypeExample3() OptUpdateOrderReqItemTypeExample3 {
	return s.ItemTypeExample3
}

// SetItemTypeExample1 sets the value of ItemTypeExample1.
func (s *UpdateOrderReq) SetItemTypeExample1(val OptUpdateOrderReqItemTypeExample1) {
	s.ItemTypeExample1 = val
}

// SetItemTypeExample2 sets the value of ItemTypeExample2.
func (s *UpdateOrderReq) SetItemTypeExample2(val OptInt) {
	s.ItemTypeExample2 = val
}

// SetItemTypeExample3 sets the value of ItemTypeExample3.
func (s *UpdateOrderReq) SetItemTypeExample3(val OptUpdateOrderReqItemTypeExample3) {
	s.ItemTypeExample3 = val
}

type UpdateOrderReqItemTypeExample1 string

const (
	UpdateOrderReqItemTypeExample1PHYSICAL UpdateOrderReqItemTypeExample1 = "PHYSICAL"
	UpdateOrderReqItemTypeExample1DIGITAL  UpdateOrderReqItemTypeExample1 = "DIGITAL"
	UpdateOrderReqItemTypeExample1SERVICE  UpdateOrderReqItemTypeExample1 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateOrderReqItemTypeExample1) MarshalText() ([]byte, error) {
	switch s {
	case UpdateOrderReqItemTypeExample1PHYSICAL:
		return []byte(s), nil
	case UpdateOrderReqItemTypeExample1DIGITAL:
		return []byte(s), nil
	case UpdateOrderReqItemTypeExample1SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateOrderReqItemTypeExample1) UnmarshalText(data []byte) error {
	switch UpdateOrderReqItemTypeExample1(data) {
	case UpdateOrderReqItemTypeExample1PHYSICAL:
		*s = UpdateOrderReqItemTypeExample1PHYSICAL
		return nil
	case UpdateOrderReqItemTypeExample1DIGITAL:
		*s = UpdateOrderReqItemTypeExample1DIGITAL
		return nil
	case UpdateOrderReqItemTypeExample1SERVICE:
		*s = UpdateOrderReqItemTypeExample1SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateOrderReqItemTypeExample3 string

const (
	UpdateOrderReqItemTypeExample3PHYSICAL UpdateOrderReqItemTypeExample3 = "PHYSICAL"
	UpdateOrderReqItemTypeExample3DIGITAL  UpdateOrderReqItemTypeExample3 = "DIGITAL"
	UpdateOrderReqItemTypeExample3SERVICE  UpdateOrderReqItemTypeExample3 = "SERVICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateOrderReqItemTypeExample3) MarshalText() ([]byte, error) {
	switch s {
	case UpdateOrderReqItemTypeExample3PHYSICAL:
		return []byte(s), nil
	case UpdateOrderReqItemTypeExample3DIGITAL:
		return []byte(s), nil
	case UpdateOrderReqItemTypeExample3SERVICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateOrderReqItemTypeExample3) UnmarshalText(data []byte) error {
	switch UpdateOrderReqItemTypeExample3(data) {
	case UpdateOrderReqItemTypeExample3PHYSICAL:
		*s = UpdateOrderReqItemTypeExample3PHYSICAL
		return nil
	case UpdateOrderReqItemTypeExample3DIGITAL:
		*s = UpdateOrderReqItemTypeExample3DIGITAL
		return nil
	case UpdateOrderReqItemTypeExample3SERVICE:
		*s = UpdateOrderReqItemTypeExample3SERVICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
