// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/notmyalias/ogent-custom-ent-enum-issue/ent"

func NewOrderCreate(e *ent.Order) *OrderCreate {
	if e == nil {
		return nil
	}
	var ret OrderCreate
	ret.ID = e.ID
	ret.ItemTypeExample1 = OrderCreateItemTypeExample1(e.ItemTypeExample1)
	ret.ItemTypeExample2 = OrderCreateItemTypeExample2(e.ItemTypeExample2)
	ret.ItemTypeExample3 = OrderCreateItemTypeExample3(e.ItemTypeExample3)
	return &ret
}

func NewOrderCreates(es []*ent.Order) []OrderCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrderCreate, len(es))
	for i, e := range es {
		r[i] = NewOrderCreate(e).Elem()
	}
	return r
}

func (o *OrderCreate) Elem() OrderCreate {
	if o == nil {
		return OrderCreate{}
	}
	return *o
}

func NewOrderList(e *ent.Order) *OrderList {
	if e == nil {
		return nil
	}
	var ret OrderList
	ret.ID = e.ID
	ret.ItemTypeExample1 = OrderListItemTypeExample1(e.ItemTypeExample1)
	ret.ItemTypeExample2 = OrderListItemTypeExample2(e.ItemTypeExample2)
	ret.ItemTypeExample3 = OrderListItemTypeExample3(e.ItemTypeExample3)
	return &ret
}

func NewOrderLists(es []*ent.Order) []OrderList {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrderList, len(es))
	for i, e := range es {
		r[i] = NewOrderList(e).Elem()
	}
	return r
}

func (o *OrderList) Elem() OrderList {
	if o == nil {
		return OrderList{}
	}
	return *o
}

func NewOrderRead(e *ent.Order) *OrderRead {
	if e == nil {
		return nil
	}
	var ret OrderRead
	ret.ID = e.ID
	ret.ItemTypeExample1 = OrderReadItemTypeExample1(e.ItemTypeExample1)
	ret.ItemTypeExample2 = OrderReadItemTypeExample2(e.ItemTypeExample2)
	ret.ItemTypeExample3 = OrderReadItemTypeExample3(e.ItemTypeExample3)
	return &ret
}

func NewOrderReads(es []*ent.Order) []OrderRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrderRead, len(es))
	for i, e := range es {
		r[i] = NewOrderRead(e).Elem()
	}
	return r
}

func (o *OrderRead) Elem() OrderRead {
	if o == nil {
		return OrderRead{}
	}
	return *o
}

func NewOrderUpdate(e *ent.Order) *OrderUpdate {
	if e == nil {
		return nil
	}
	var ret OrderUpdate
	ret.ID = e.ID
	ret.ItemTypeExample1 = OrderUpdateItemTypeExample1(e.ItemTypeExample1)
	ret.ItemTypeExample2 = OrderUpdateItemTypeExample2(e.ItemTypeExample2)
	ret.ItemTypeExample3 = OrderUpdateItemTypeExample3(e.ItemTypeExample3)
	return &ret
}

func NewOrderUpdates(es []*ent.Order) []OrderUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrderUpdate, len(es))
	for i, e := range es {
		r[i] = NewOrderUpdate(e).Elem()
	}
	return r
}

func (o *OrderUpdate) Elem() OrderUpdate {
	if o == nil {
		return OrderUpdate{}
	}
	return *o
}
