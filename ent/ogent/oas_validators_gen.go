// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateOrderReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ItemTypeExample1.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ItemTypeExample3.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateOrderReqItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateOrderReqItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ListOrderOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *OrderCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ItemTypeExample1.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ItemTypeExample3.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrderCreateItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrderCreateItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *OrderList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ItemTypeExample1.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ItemTypeExample3.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrderListItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrderListItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *OrderRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ItemTypeExample1.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ItemTypeExample3.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrderReadItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrderReadItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *OrderUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ItemTypeExample1.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ItemTypeExample3.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrderUpdateItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrderUpdateItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *UpdateOrderReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ItemTypeExample1.Set {
			if err := func() error {
				if err := s.ItemTypeExample1.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ItemTypeExample3.Set {
			if err := func() error {
				if err := s.ItemTypeExample3.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_type_example_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UpdateOrderReqItemTypeExample1) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UpdateOrderReqItemTypeExample3) Validate() error {
	switch s {
	case "PHYSICAL":
		return nil
	case "DIGITAL":
		return nil
	case "SERVICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
